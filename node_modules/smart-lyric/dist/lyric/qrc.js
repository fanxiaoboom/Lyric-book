"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.parse = exports.encrypt = exports.EncryptType = exports.decrypt = void 0;
const zlib_1 = __importDefault(require("zlib"));
const des_1 = require("../lib/des");
const xml_1 = require("../lib/xml");
const declare_1 = require("./declare");
const yizhi_html_escape_1 = require("yizhi-html-escape");
const common_1 = require("./common");
//歌词密码
const QRC_KEY1 = Buffer.from("!@#)(NHLiuy*$%^&");
const QRC_KEY2 = Buffer.from("123ZXC!@#)(*$%^&");
const QRC_KEY3 = Buffer.from("!@#)(*$%^&abcDEF");
/** 新旧版转换密码 */
const VERSION_CONVERT_CODE = [
    0x77, 0x48, 0x32, 0x73, 0xDE, 0xF2, 0xC0, 0xC8, 0x95, 0xEC, 0x30, 0xB2, 0x51, 0xC3, 0xE1, 0xA0,
    0x9E, 0xE6, 0x9D, 0xCF, 0xFA, 0x7F, 0x14, 0xD1, 0xCE, 0xB8, 0xDC, 0xC3, 0x4A, 0x67, 0x93, 0xD6,
    0x28, 0xC2, 0x91, 0x70, 0xCA, 0x8D, 0xA2, 0xA4, 0xF0, 0x08, 0x61, 0x90, 0x7E, 0x6F, 0xA2, 0xE0,
    0xEB, 0xAE, 0x3E, 0xB6, 0x67, 0xC7, 0x92, 0xF4, 0x91, 0xB5, 0xF6, 0x6C, 0x5E, 0x84, 0x40, 0xF7,
    0xF3, 0x1B, 0x02, 0x7F, 0xD5, 0xAB, 0x41, 0x89, 0x28, 0xF4, 0x25, 0xCC, 0x52, 0x11, 0xAD, 0x43,
    0x68, 0xA6, 0x41, 0x8B, 0x84, 0xB5, 0xFF, 0x2C, 0x92, 0x4A, 0x26, 0xD8, 0x47, 0x6A, 0x7C, 0x95,
    0x61, 0xCC, 0xE6, 0xCB, 0xBB, 0x3F, 0x47, 0x58, 0x89, 0x75, 0xC3, 0x75, 0xA1, 0xD9, 0xAF, 0xCC,
    0x08, 0x73, 0x17, 0xDC, 0xAA, 0x9A, 0xA2, 0x16, 0x41, 0xD8, 0xA2, 0x06, 0xC6, 0x8B, 0xFC, 0x66,
    0x34, 0x9F, 0xCF, 0x18, 0x23, 0xA0, 0x0A, 0x74, 0xE7, 0x2B, 0x27, 0x70, 0x92, 0xE9, 0xAF, 0x37,
    0xE6, 0x8C, 0xA7, 0xBC, 0x62, 0x65, 0x9C, 0xC2, 0x08, 0xC9, 0x88, 0xB3, 0xF3, 0x43, 0xAC, 0x74,
    0x2C, 0x0F, 0xD4, 0xAF, 0xA1, 0xC3, 0x01, 0x64, 0x95, 0x4E, 0x48, 0x9F, 0xF4, 0x35, 0x78, 0x95,
    0x7A, 0x39, 0xD6, 0x6A, 0xA0, 0x6D, 0x40, 0xE8, 0x4F, 0xA8, 0xEF, 0x11, 0x1D, 0xF3, 0x1B, 0x3F,
    0x3F, 0x07, 0xDD, 0x6F, 0x5B, 0x19, 0x30, 0x19, 0xFB, 0xEF, 0x0E, 0x37, 0xF0, 0x0E, 0xCD, 0x16,
    0x49, 0xFE, 0x53, 0x47, 0x13, 0x1A, 0xBD, 0xA4, 0xF1, 0x40, 0x19, 0x60, 0x0E, 0xED, 0x68, 0x09,
    0x06, 0x5F, 0x4D, 0xCF, 0x3D, 0x1A, 0xFE, 0x20, 0x77, 0xE4, 0xD9, 0xDA, 0xF9, 0xA4, 0x2B, 0x76,
    0x1C, 0x71, 0xDB, 0x00, 0xBC, 0xFD, 0x0C, 0x6C, 0xA5, 0x47, 0xF7, 0xF6, 0x00, 0x79, 0x4A, 0x11,
];
/*** 歌词标识 */
const OFFSET_TAG = Buffer.from('[offset:');
//新旧版本转换
function convertNewQRC(content) {
    const result = Buffer.alloc(content.byteLength);
    for (let i = 0; i < content.byteLength; ++i) {
        result[i] = content[i] ^ VERSION_CONVERT_CODE[(i * i + 0x013c1b) % 256];
    }
    return result;
}
//填充Buffer为8的倍数
function padBuffer(buffer, offset) {
    let len = buffer.byteLength - offset;
    const mod = len % 8;
    if (mod)
        len += 8 - mod;
    const result = Buffer.alloc(len, 0);
    buffer.copy(result, 0, offset, buffer.length);
    return result;
}
/**
 * 解密QRC歌词，得到歌词XML文本
 * @param buffer 歌词内容，可以从.qrc文件读取，也可以通过QQ音乐API下载
 * @returns 解密后的歌词，解密失败返回null
 */
function decrypt(buffer) {
    try {
        //如果是新版的，转换为旧版
        if (buffer[0] == 0x98 && buffer[1] == 0x25)
            buffer = convertNewQRC(buffer);
        //检测是否有"[offset:"， 如果有则为歌词
        if (!buffer.compare(OFFSET_TAG, 0, OFFSET_TAG.length, 0, OFFSET_TAG.length)) {
            //填补剩余空间
            const content = padBuffer(buffer, 0x0b);
            //解密
            (0, des_1.des)(content, QRC_KEY1, des_1.DesType.Decode);
            (0, des_1.des)(content, QRC_KEY2, des_1.DesType.Encode);
            (0, des_1.des)(content, QRC_KEY3, des_1.DesType.Decode);
            //解压，得到歌词
            const result = zlib_1.default.inflateSync(content);
            return result.toString();
        }
        //尝试解码网络获取的歌词
        const result = padBuffer(buffer, 0);
        (0, des_1.des)(result, QRC_KEY1, des_1.DesType.Decode);
        (0, des_1.des)(result, QRC_KEY2, des_1.DesType.Encode);
        (0, des_1.des)(result, QRC_KEY3, des_1.DesType.Decode);
        return zlib_1.default.unzipSync(result).toString();
    }
    catch (err) {
        return null;
    }
}
exports.decrypt = decrypt;
/** QRC歌词编码类型 */
var EncryptType;
(function (EncryptType) {
    /** 新版歌词 */
    EncryptType[EncryptType["QRC"] = 0] = "QRC";
    /** 旧版歌词 */
    EncryptType[EncryptType["OLD_QRC"] = 1] = "OLD_QRC";
})(EncryptType = exports.EncryptType || (exports.EncryptType = {}));
/**
 * 编码歌词
 * @param content 歌词的XML内容
 * @param type 歌词类型，默认为新版的歌词
 */
function encrypt(content, type = EncryptType.QRC) {
    //压缩
    let result = zlib_1.default.deflateSync(content);
    //加密
    result = padBuffer(result, 0);
    (0, des_1.des)(result, QRC_KEY3, des_1.DesType.Encode);
    (0, des_1.des)(result, QRC_KEY2, des_1.DesType.Decode);
    (0, des_1.des)(result, QRC_KEY1, des_1.DesType.Encode);
    //加上标签
    result = Buffer.concat([
        Buffer.from('[offset:0]\n'),
        result,
    ]);
    //转换为新版的歌词
    if (type === EncryptType.QRC)
        result = convertNewQRC(result);
    return result;
}
exports.encrypt = encrypt;
/**
 * 解析QRC歌词
 * @param qrcText QRC歌词文本内容(解码后的XML格式)
 */
function parse(qrcText) {
    //解析XML数据，得到歌词数据
    const lyric = (() => {
        try {
            const res = (0, xml_1.parseXML)(qrcText).root;
            //QrcInfos标签
            if (res.name.toLowerCase() != 'QrcInfos'.toLowerCase())
                throw new Error('match QrcInfos TAG failed');
            if (!(res.children instanceof Array))
                throw new Error('match QrcInfos TAG failed');
            //LyricInfo标签
            const lyricInfoTag = res.children.find(e => e.name.toLowerCase() === 'LyricInfo'.toLowerCase());
            if (!lyricInfoTag)
                throw new Error(`match LyricInfo TAG failed`);
            if (!(lyricInfoTag.children instanceof Array))
                throw new Error(`match LyricInfo TAG failed`);
            //歌词列表
            const lyricTags = lyricInfoTag.children.filter(t => /^Lyric_\d+/.test(t.name));
            return lyricTags.map(t => {
                const lyric = { type: 1, content: '' };
                t.props.forEach(p => {
                    if (p.name.toLowerCase() == 'LyricContent'.toLowerCase())
                        lyric.content = p.value ?? '';
                    else if (p.name.toLowerCase() == 'LyricType')
                        lyric.type = parseInt(p.value ?? '1');
                });
                return lyric;
            }).filter(l => l.content);
        }
        catch (err) {
            if (err instanceof xml_1.XMLError)
                throw new Error(`parse QRC XML data failed`);
            else
                throw err;
        }
    })()[0];
    if (!lyric)
        throw new Error(`QRC file not contains any lyric data`);
    //结果
    const result = { type: declare_1.LyricType.KARA, content: [] };
    //逐行处理
    lyric.content.split(/\r?\n/).forEach(line => {
        line = line.trim();
        //歌词行
        const match = line.match(/^\[\s*(\d+)\s*,\s*(\d+)\s*\](.*)$/);
        if (match) {
            //目标信息
            const lrcLine = {
                start: parseInt(match[1]),
                duration: parseInt(match[2]),
                content: [],
            };
            //一直往后所搜词语
            let rem = match[3];
            while (rem.length) {
                const match = rem.match(/\(\s*(\d+)\s*,\s*(\d+)\s*\)/);
                if (match) {
                    const word = {
                        start: parseInt(match[1]) - lrcLine.start,
                        duration: parseInt(match[2]),
                        content: (0, yizhi_html_escape_1.unescape)(rem.substring(0, match.index)),
                    };
                    if (word.content)
                        lrcLine.content.push(word);
                    rem = rem.substring(match.index + match[0].length);
                }
            }
            //保存行
            if (lrcLine.content.length)
                result.content.push(lrcLine);
        }
        //标签
        else
            (0, common_1.parseLyricTag)(result, line);
    });
    return result;
}
exports.parse = parse;
/**
 * 将歌词转换为XML文本
 * @param lyric 歌词(只能是卡拉OK歌词)
 */
function stringify(lyric) {
    if (lyric.type != declare_1.LyricType.KARA)
        throw new Error(`lrc cannot stringify to qrc`);
    const buffer = [...(0, common_1.genLyricTag)(lyric)];
    lyric.content.forEach(line => {
        if (typeof line.content === 'string')
            return;
        const dur = line.duration ?? (() => {
            const last = line.content[line.content.length - 1];
            if (!last)
                return 0;
            return last.start + line.start + last.duration;
        })();
        const text = line.content.map(word => `${word.content}(${word.start + line.start},${word.duration})`).join('');
        buffer.push(`[${line.start},${dur}]${text}`);
    });
    return [
        `<?xml version="1.0" encoding="utf-8"?>`,
        `<QrcInfos>`,
        `	<QrcHeadInfo SaveTime="${parseInt(Date.now() / 1000)}" Version="100" />`,
        `	<LyricInfo LyricCount="1">`,
        `		<Lyric_1 LyricType="1" LyricContent="${(0, yizhi_html_escape_1.escape)(buffer.join('\n'))}\n" />`,
        `	</LyricInfo>`,
        `</QrcInfos>`,
    ].join('\n');
}
exports.stringify = stringify;
