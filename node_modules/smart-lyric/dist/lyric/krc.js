"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.parse = exports.encrypt = exports.decrypt = void 0;
const yizhi_html_escape_1 = require("yizhi-html-escape");
const zlib_1 = __importDefault(require("zlib"));
const common_1 = require("./common");
const declare_1 = require("./declare");
const KUGOU_KEY = Buffer.from([64, 71, 97, 119, 94, 50, 116, 71, 81, 54, 49, 45, 206, 210, 110, 105]);
const KRC_TAG = Buffer.from([0x6b, 0x72, 0x63, 0x31]);
//加密、解密
function kugouConvert(buffer) {
    for (let i = 0; i < buffer.byteLength; ++i) {
        buffer[i] ^= KUGOU_KEY[i % KUGOU_KEY.length];
    }
    return buffer;
}
/**
 * 酷狗歌词解密，并返回krc文本
 * @param buffer 歌词内容
 */
function decrypt(buffer) {
    //检测开头4个字节
    if (buffer.compare(KRC_TAG, 0, KRC_TAG.length, 0, KRC_TAG.length))
        return null;
    try {
        //解密
        buffer = kugouConvert(buffer.subarray(4));
        //解压
        return zlib_1.default.inflateSync(buffer).toString();
    }
    catch (err) {
        return null;
    }
}
exports.decrypt = decrypt;
/**
 * 加密krc歌词
 * @param krcText krc歌词文本
 */
function encrypt(krcText) {
    //压缩
    let buffer = zlib_1.default.deflateSync(Buffer.from(krcText));
    //加密
    buffer = kugouConvert(buffer);
    //加上标记
    return Buffer.concat([KRC_TAG, buffer]);
}
exports.encrypt = encrypt;
/**
 * 解析KRC歌词
 * @param krcText KRC歌词文本内容
 */
function parse(krcText) {
    //结果
    const result = { type: declare_1.LyricType.KARA, content: [] };
    //逐行处理
    krcText.split(/\r?\n/).forEach(line => {
        line = line.trim();
        //歌词行
        const match = line.match(/^\[\s*(\d+)\s*,\s*(\d+)\s*\](.*)$/);
        if (match) {
            //目标信息
            const lrcLine = {
                start: parseInt(match[1]),
                duration: parseInt(match[2]),
                content: [],
            };
            //一直往后所搜词语
            let rem = match[3];
            while (rem.length) {
                const match = rem.match(/^<(\d+),(\d+),(\d+)>([^<]+)/);
                if (match) {
                    const word = {
                        start: parseInt(match[1]),
                        duration: parseInt(match[2]),
                        content: (0, yizhi_html_escape_1.unescape)(match[4]),
                    };
                    if (word.content)
                        lrcLine.content.push(word);
                    rem = rem.substring(match[0].length);
                }
                else
                    break;
            }
            //保存行
            if (lrcLine.content.length)
                result.content.push(lrcLine);
        }
        //标签
        else
            (0, common_1.parseLyricTag)(result, line);
    });
    return result;
}
exports.parse = parse;
/**
 * 将歌词转换为KRC文本
 * @param lyric 歌词(只能是卡拉OK歌词)
 */
function stringify(lyric) {
    if (lyric.type != declare_1.LyricType.KARA)
        throw new Error(`lrc cannot stringify to krc`);
    const buffer = [...(0, common_1.genLyricTag)(lyric)];
    lyric.content.forEach(line => {
        if (typeof line.content === 'string')
            return;
        const dur = line.duration ?? (() => {
            const last = line.content[line.content.length - 1];
            if (!last)
                return 0;
            return last.start + line.start + last.duration;
        })();
        const text = line.content.map(word => `<${word.start},${word.duration},0>${word.content}`).join('');
        buffer.push(`[${line.start},${dur}]${text}`);
    });
    return buffer.join('\n');
}
exports.stringify = stringify;
