"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.parse = void 0;
const declare_1 = require("./declare");
const common_1 = require("./common");
/**
 * 解析nrc歌词
 * @param nrcxText nrc歌词文本内容
 */
function parse(nrcxText) {
    //结果
    const result = { type: declare_1.LyricType.KARA, content: [] };
    //逐行处理
    nrcxText.split(/\r?\n/).forEach(line => {
        line = line.trim();
        const match = line.match(/^\[(\d+),(\d+)\]/);
        if (match) {
            const lyricLine = {
                start: parseInt(match[1]),
                duration: parseInt(match[2]),
                content: [],
            };
            line = line.substring(match[0].length);
            while (line.length) {
                const match = line.match(/^\((\d+),(\d+)(,(\d+))?\)([^\(]+)/);
                if (!match)
                    break;
                const start = parseInt(match[1]);
                const dur = parseInt(match[2]);
                const txt = match[5];
                lyricLine.content.push({
                    start: start - lyricLine.start,
                    duration: dur,
                    content: txt,
                });
                line = line.substring(match[0].length);
            }
            if (lyricLine.content.length)
                result.content.push(lyricLine);
        }
        else
            (0, common_1.parseLyricTag)(result, line);
    });
    return result;
}
exports.parse = parse;
/**
 * 将nrc歌词转换为文本
 *
 * @param lyric 歌词(只能是卡拉OK歌词)
 */
function stringify(lyric) {
    if (lyric.type != declare_1.LyricType.KARA)
        throw new Error(`lrc cannot stringify to nrc`);
    const buffer = [...(0, common_1.genLyricTag)(lyric)];
    lyric.content.forEach(line => {
        if (typeof line.content === 'string')
            return;
        const text = line.content.map(word => {
            return `(${word.start + line.start},${word.duration},${0})${word.content}`;
        }).join('');
        buffer.push(`[${line.start},${line.duration}]${text}`);
    });
    return buffer.join('\n');
}
exports.stringify = stringify;
