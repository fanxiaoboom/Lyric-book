"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadNeteasyLyric = exports.downloadKuwoLyric = exports.downloadKugouLyric = exports.downloadQQMusicLyric = void 0;
const crypto_1 = __importDefault(require("crypto"));
const iconv_lite_1 = __importDefault(require("iconv-lite"));
const zlib_1 = __importDefault(require("zlib"));
const qrcUtil = __importStar(require("../lyric/qrc"));
const krcUtil = __importStar(require("../lyric/krc"));
const lrcxUtil = __importStar(require("../lyric/lrcx"));
const request_1 = require("../lib/request");
/**
 * 从QQ音乐API下载歌词
 * @param option 下载选项
 */
async function downloadQQMusicLyric(option) {
    //创建一个参数
    const createParam = (paranName, value) => {
        if (value && typeof value === 'string')
            return { [paranName]: Buffer.from(value).toString('base64') };
        else if (value instanceof Array)
            return { [paranName]: Buffer.from(value.filter(s => !!s).join(' ')).toString('base64') };
        return {};
    };
    //请求歌词
    const resp = await (0, request_1.request)({
        url: `https://u.y.qq.com/cgi-bin/musicu.fcg?pcachetime=1675229492`,
        method: 'post',
        headers: {
            'Accept': '*/*',
            'Accept-Language': 'zh-CN',
            'Host': 'u.y.qq.com',
            'User-Agent': 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'Keep-Alive',
        },
        body: utils => {
            return utils.json({
                "music.musichallSong.PlayLyricInfo.GetPlayLyricInfo": {
                    "method": "GetPlayLyricInfo",
                    "module": "music.musichallSong.PlayLyricInfo",
                    "param": {
                        ...createParam('albumName', option.albumName),
                        "crypt": 0,
                        // "ct": 19,
                        // "cv": 1906,
                        // "interval": 304,
                        // "lrc_t": 0,
                        qrc: (option.qrc ?? true) ? 1 : 0,
                        // "qrc_t": 0,
                        // "roma": option.roma ? 1 : 0,
                        // "roma_t": 0,
                        ...createParam('singerName', option.singerName),
                        "songID": parseInt(option.songID),
                        ...createParam('songName', option.songName),
                        // "trans": option.trans ? 0 : 1,
                        // "trans_t": 0,
                        // "type": 0,
                    }
                }
            });
        },
        type: 'json',
    });
    const lyricInfo = resp?.['music.musichallSong.PlayLyricInfo.GetPlayLyricInfo']?.data;
    const parseLyric = (str, type) => {
        if (!str)
            return null;
        if (type === 'hex')
            return qrcUtil.decrypt(Buffer.from(str, 'hex'))?.toString() ?? null;
        else
            return Buffer.from(str, 'base64').toString();
    };
    if (lyricInfo.lyric) {
        if (lyricInfo?.qrc)
            return { karaok: parseLyric(lyricInfo.lyric, 'hex'), regular: null };
        else
            return { karaok: null, regular: Buffer.from(lyricInfo.lyric, 'base64').toString() };
    }
    return { karaok: null, regular: null };
    // let result: IQQMusicDownloadResult | null = null
    // //内容为qrc
    // if (lyricInfo?.qrc === 1) result = {
    // 	lyric: parseLyric(lyricInfo.lyric, 'hex')!,
    // 	roma: parseLyric(lyricInfo.roma, 'hex'),
    // 	trans: parseLyric(lyricInfo.trans, 'hex'),
    // }
    // //内容为lrc
    // else if (lyricInfo?.qrc === 0) result = {
    // 	lyric: parseLyric(lyricInfo.lyric, lyricInfo.crypt ? 'hex' : 'base64')!,
    // 	//这两个都是qrc歌词
    // 	roma: parseLyric(lyricInfo.roma, 'hex'),
    // 	trans: parseLyric(lyricInfo.trans, 'hex'),
    // }
    // return result?.lyric ? result : null
}
exports.downloadQQMusicLyric = downloadQQMusicLyric;
/**
 * 从酷狗音乐下载歌词
 *
 * __`id`和`accessKey`可以通过歌词搜索api获得__
 *
 * `http://lyrics.kugou.com/search?ver=1&man=yes&client=pc&keyword=<KW>&duration=<DUR>&hash=<HASH>`
 *
 * @param option 下载选项
 * @returns krc歌词文本内容
 */
async function downloadKugouLyric(option) {
    //请求数据
    const resp = await (0, request_1.request)({
        url: `http://lyrics.kugou.com/download?ver=1&client=pc&id=${option.id}&accesskey=${option.accesskey}&fmt=${option.fmt ?? 'krc'}&charset=utf8`,
        method: 'get',
        type: 'json',
    });
    if (resp.status === 200 && resp.content) {
        if (resp.fmt === 'krc')
            return { karaok: krcUtil.decrypt(Buffer.from(resp.content, 'base64')), regular: null };
        else if (resp.fmt === 'lrc')
            return { karaok: null, regular: Buffer.from(resp.content, 'base64').toString() };
    }
    return { karaok: null, regular: null };
}
exports.downloadKugouLyric = downloadKugouLyric;
/**
 * 下载酷我音乐歌词
 * @param option 下载选项
 */
async function downloadKuwoLyric(option) {
    const KUWO_KEY = Buffer.from('yeelion');
    //加密歌词参数
    const buildParams = (id, lrcx) => {
        const rid = (typeof id == 'number' || /^\d+$/.test(id)) ? `MUSIC_${id}` : id;
        let params = `user=313928,MUSIC_9.1.1.8_W6,kwmusic_web_6 (1).exe,KwMusic&requester=localhost&req=1&rid=${rid}`;
        if (lrcx)
            params += '&lrcx=1&olrc=1';
        const pBuffer = Buffer.from(params);
        const output = new Uint16Array(pBuffer.byteLength);
        for (let i = 0; i < pBuffer.byteLength; ++i) {
            output[i] = KUWO_KEY[i % KUWO_KEY.length] ^ pBuffer[i];
        }
        return Buffer.from(output).toString('base64');
    };
    //测试解码
    // const test = (buf: Buffer) => {
    // 	const src = Uint16Array.from(buf)
    // 	const out = Buffer.alloc(src.length)
    // 	for (let i = 0; i < src.length; ++i) {
    // 		out[i] = KUWO_KEY[i % KUWO_KEY.length] ^ src[i]
    // 	}
    // 	console.log(out + '')
    // }
    // test(Buffer.from(option.key, 'base64'))
    //请求歌词
    let buffer = await (0, request_1.request)({ url: `http://newlyric.kuwo.cn/newlyric.lrc?${buildParams(option.musicID, option.lrcx ?? true)}`, method: 'get' });
    //读取基本信息(其实没有用)，并得到歌词内容
    const baseInfo = {};
    let beg = 0;
    for (let i = 0; i < buffer.byteLength; ++i) {
        //读取到换行
        if (buffer.readUint16BE(i) == 0x0d0a) {
            //得到信息
            const infoStr = buffer.subarray(beg, i).toString();
            const eqAt = infoStr.indexOf('=');
            if (eqAt > 0) {
                const key = infoStr.substring(0, eqAt).trim();
                const val = infoStr.substring(eqAt + 1).trim();
                switch (key) {
                    case 'path':
                    case 'score':
                    case 'lrc_length':
                    case 'cand_lrc_count':
                    case 'wiki_entry_sig':
                    case 'lrcx':
                    case 'show':
                        baseInfo[key] = val ? parseInt(val) : null;
                        if (typeof baseInfo[key] === 'number' && isNaN(baseInfo[key]))
                            baseInfo[key] = val;
                        break;
                    default:
                        baseInfo[key] = val;
                        break;
                }
            }
            beg = i + 2;
            //连续换行，结束
            if (buffer.readUint16BE(beg) == 0x0d0a) {
                buffer = buffer.subarray(beg + 2);
                break;
            }
        }
    }
    const isLyric = (str) => /^\[[0-9a-zA-Z]+:/.test(str);
    const tryParseRegular = (buffer) => {
        let result = lrcxUtil.decrypt(buffer);
        if (!result || !isLyric(result))
            result = iconv_lite_1.default.decode(zlib_1.default.inflateSync(buffer), 'gb18030');
        if (result && isLyric(result))
            return result;
        return null;
    };
    if (buffer.byteLength && baseInfo.lrc_length) {
        if (baseInfo.lrcx)
            return { karaok: lrcxUtil.decrypt(buffer), regular: null };
        else
            return { karaok: null, regular: tryParseRegular(buffer) };
    }
    return { karaok: null, regular: null };
}
exports.downloadKuwoLyric = downloadKuwoLyric;
/**
 * 下载网易云音乐歌词
 * @param option 下载选项
 */
async function downloadNeteasyLyric(option) {
    const encryptData = (paramData) => {
        const text = JSON.stringify(paramData);
        const url = '/api/song/lyric';
        const message = `nobody${url}use${text}md5forencrypt`;
        const digest = crypto_1.default.createHash('md5').update(message).digest("hex");
        const data = `${url}-36cd479b6b5-${text}-36cd479b6b5-${digest}`;
        const cipher = crypto_1.default.createCipheriv(`aes-128-ecb`, 'e82ckenh8dichen8', '');
        return Buffer.concat([cipher.update(Buffer.from(data)), cipher.final()]).toString('hex').toUpperCase();
    };
    const res = await (0, request_1.request)({
        url: 'https://interface.music.163.com/eapi/song/lyric',
        method: 'post',
        body: util => util.urlencoded({
            params: encryptData({
                os: "pc",
                id: option.musicID.toString(),
                lv: "-1",
                kv: "-1",
                tv: "-1",
                rv: "-1",
                yv: "1",
                showRole: "true",
            })
        }),
        headers: {
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate,br',
        },
        type: 'json',
    });
    return {
        karaok: ((res?.klyric?.lyric ?? '') + (res?.yrc?.lyric ?? '')) || null,
        regular: ((res?.klyric?.lyric ?? '') + (res?.lrc?.lyric ?? '')) || null,
    };
}
exports.downloadNeteasyLyric = downloadNeteasyLyric;
