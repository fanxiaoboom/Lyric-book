"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.request = void 0;
const zlib_1 = __importDefault(require("zlib"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
function request(option) {
    return new Promise((resolve, reject) => {
        const requestFunc = option.url.startsWith('https://') ? https_1.default.request : http_1.default.request;
        const method = (option.method ?? 'get').toLowerCase();
        //处理body
        let contentType = null;
        const body = option.body ? option.body({
            json(data) {
                contentType = 'application/json';
                return Buffer.from(JSON.stringify(data));
            },
            urlencoded(data) {
                contentType = 'application/x-www-form-urlencoded';
                return Buffer.from(Object.keys(data).map(k => `${k}=${encodeURIComponent(data[k])}`).join('&'));
            },
        }) : null;
        //发起请求
        const req = requestFunc(option.url, {
            method,
            headers: {
                ...option.headers,
                ...(['get', 'options'].includes(method) || !body) ? {} : { 'Content-Length': body.byteLength },
                ...contentType ? { 'Content-Type': contentType } : {},
            },
        }, res => {
            const buffer = [];
            res.on('data', d => buffer.push(d));
            res.on('error', reject);
            res.once('close', () => {
                let data = Buffer.concat(buffer);
                switch (res.headers['content-encoding']) {
                    case 'gzip':
                        data = zlib_1.default.gunzipSync(data);
                        break;
                    case 'deflate':
                        data = zlib_1.default.inflateSync(data);
                        break;
                    case 'br':
                        data = zlib_1.default.brotliDecompressSync(data);
                        break;
                }
                switch (option.type) {
                    case 'text':
                        resolve(data.toString());
                        break;
                    case 'json':
                        resolve(JSON.parse(data.toString()));
                        break;
                    default:
                        resolve(data);
                        break;
                }
            });
        });
        req.on('error', reject);
        req.end(body);
    });
}
exports.request = request;
